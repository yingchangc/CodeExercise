///75. Sort Colors
///https://leetcode.com/problems/sort-colors/description/
///Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.
///Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
///
///Note: You are not suppose to use the library's sort function for this problem.
///
///Example:
///
///Input: [2,0,2,1,1,0]
///Output: [0,0,1,1,2,2]
///
/// sol:
/// (1)A rather straight forward solution is a two-pass algorithm using counting sort.
/// First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
/// (2)use "zeroIdx" :0   and "twoIdx": len-1, 
///    hit 1, i++,  
///    hit 0  swap(i++, zeroIdx++),
///    hit 2, swap(i, twoIdx--)  only, keep i for next check,

[code]
 while(i <= twoIdx)    // yic must be <=     for example [1,2,0] -> after first swap [1,0,2]  twoidx = 1, i = 1 as well
{
    if (colors[i] == 0)
    {
        // only hit 0 itself or 1 need to swap,
        swap(colors, i, zeroIdx++);
        i++;
    }
    else if (colors[i] == 2)
    {
        swap(colors, i, twoIdx--);  // we don't know what to swap back, so keep the same i
    }
    else
    {
        // 1 case , keep going
        i++;
    }
}



/// 516
/// https://leetcode.com/problems/longest-palindromic-subsequence/description/
/// Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.
///Example 1:
///Input:
///
///"bbbab"
///Output:
///4
///One possible longest palindromic subsequence is "bbbb".
/// sol:
/// 
/// F("bbbab")   = max (  F(bbba), F(bbab), F(bba) + 2 ie frontChar==lstChar b==b)
/// 區間型  for by check length
/// 
/// create
/// f[N,N]
/// 
/// init
/// f[i,i]=1
/// f[i,i+1] = 1 or 2
/// 
/// for len = 3 ~ len
///    for i = 3
///       f[i,i+len-1] = max (f[i, i+len-2], f[i+1, i+len-1])   and max with (f[i+1, i+len-2] + 2)
///      



//辗转相除法， 又名欧几里德算法， 是求最大公约数的一种方法。它的具体做法是：用较大的数除以较小的数，再用除数除以出现的余数（第一余数），再用第一余数除以出现的余数（第二余数），如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。
代码
public int gcd(int big, int small) {
    if (small != 0) {
        return gcd(small, big % small);
    } else {
        return big;
    }
}


/// 29
/// https://leetcode.com/problems/divide-two-integers/description/
/// 
/// Divide two integers without using multiplication, division and mod operator.
/// If it is overflow, return MAX_INT.
[code]
long a = Math.abs((long)dividend);
long b = Math.abs((long)divisor);
int result = 0;
while(a >= b){
    int shift = 0;
    while(a >= (b << shift)){      // 3*3*3*...
        shift++;
    }
    a -= b << (shift - 1);
    result += 1 << (shift - 1);
}
return isNegative? -result: result;