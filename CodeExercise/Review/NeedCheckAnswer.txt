///75. Sort Colors
///https://leetcode.com/problems/sort-colors/description/
///Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.
///Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
///
///Note: You are not suppose to use the library's sort function for this problem.
///
///Example:
///
///Input: [2,0,2,1,1,0]
///Output: [0,0,1,1,2,2]
///
/// sol:
/// (1)A rather straight forward solution is a two-pass algorithm using counting sort.
/// First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
/// (2)use "zeroIdx" :0   and "twoIdx": len-1, 
///    hit 1, i++,  
///    hit 0  swap(i++, zeroIdx++),
///    hit 2, swap(i, twoIdx--)  only, keep i for next check,

[code]
 while(i <= twoIdx)    // yic must be <=     for example [1,2,0] -> after first swap [1,0,2]  twoidx = 1, i = 1 as well
{
    if (colors[i] == 0)
    {
        // only hit 0 itself or 1 need to swap,
        swap(colors, i, zeroIdx++);
        i++;
    }
    else if (colors[i] == 2)
    {
        swap(colors, i, twoIdx--);  // we don't know what to swap back, so keep the same i
    }
    else
    {
        // 1 case , keep going
        i++;
    }
}



/// 516
/// https://leetcode.com/problems/longest-palindromic-subsequence/description/
/// Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.
///Example 1:
///Input:
///
///"bbbab"
///Output:
///4
///One possible longest palindromic subsequence is "bbbb".
/// sol:
/// 
/// F("bbbab")   = max (  F(bbba), F(bbab), F(bba) + 2 ie frontChar==lstChar b==b)
/// 區間型  for by check length
/// 
/// create
/// f[N,N]
/// 
/// init
/// f[i,i]=1
/// f[i,i+1] = 1 or 2
/// 
/// for len = 3 ~ len
///    for i = 3
///       f[i,i+len-1] = max (f[i, i+len-2], f[i+1, i+len-1])   and max with (f[i+1, i+len-2] + 2)
///      



//辗转相除法， 又名欧几里德算法， 是求最大公约数的一种方法。它的具体做法是：用较大的数除以较小的数，再用除数除以出现的余数（第一余数），再用第一余数除以出现的余数（第二余数），如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。
代码
public int gcd(int big, int small) {
    if (small != 0) {
        return gcd(small, big % small);
    } else {
        return big;
    }
}


/// 29
/// https://leetcode.com/problems/divide-two-integers/description/
/// 
/// Divide two integers without using multiplication, division and mod operator.
/// If it is overflow, return MAX_INT.
[code]
long noSign_dividend = ABS_num((long)dividend);
long noSign_divisor = ABS_num((long)divisor);

while (noSign_dividend >= noSign_divisor)
{
    long currDivisor = noSign_divisor;
    int temp = 1;

    while (noSign_dividend >= currDivisor)
    {
        noSign_dividend -= currDivisor;
        ans += temp;
        currDivisor <<= 1;
        temp <<= 1;
    }
}


/// 297. Serialize and Deserialize Binary Tree
/// https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/
/// 
/// Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
///    Design an algorithm to serialize and deserialize a binary tree.There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized 
///    to the original tree structure.
///
///    Example: 
///
///
///    You may serialize the following tree:
///
///    1
///   / \
///  2   3
///     / \
///    4   5
///
///as "[1,2,3,null,null,4,5]"
///
/// sol:
/// 
///  serialize level order, always add node, dequeue append # or num
[code]

(1) encode
Queue<TreeNode> queue = new Queue<TreeNode>();
queue.Enqueue(root);

while (queue.Count >0)
{
    var node = queue.Dequeue();
    EncodeNode(node, sb);   // add (num|#)  + ","

    if (node != null)   // yic: easy to get wrong here
    {
        queue.Enqueue(node.left);    // add node or null
        queue.Enqueue(node.right);
    }
}

sb.Remove(sb.Length - 1, 1);  // remove the last ','


(2) decode   // 1,2,3,#,#,4,5,#,#,#,#
// yic use queue to memo the next node to add child
Queue<TreeNode> queue = new Queue<TreeNode>();

var tokens = data.Split(',');

// handle root node (since no pre)
TreeNode root = new TreeNode(Convert.ToInt32(tokens[0]));

TreeNode parent = root;

int len = tokens.Length;
bool isLeft = true;      // trick
for(int i = 1; i <len; i++)
{
    TreeNode child = null;
    if (tokens[i] != "#")
    {
        child = new TreeNode(Convert.ToInt32(tokens[i]));
        queue.Enqueue(child);
    }

    if (isLeft)
    {
        parent.left = child;
    }
    if (!isLeft)
    {
        parent.right = child; 
    }

    if (!isLeft && queue.Count > 0)    // yic: prevent last node          1                  case
    {                                  //                           null    null    
        parent = queue.Dequeue();
    }

    isLeft = !isLeft;   // swap   
}



/// 98. Validate Binary Search Tree
/// https://leetcode.com/problems/validate-binary-search-tree/description/
/// Given a binary tree, determine if it is a valid binary search tree (BST).
/// Assume a BST is defined as follows:
/// 
/// The left subtree of a node contains only nodes with keys less than the node's key.
/// The right subtree of a node contains only nodes with keys greater than the node's key.
/// Both the left and right subtrees must also be binary search trees.
/// sol:
/// 
/// think use stack
/// 
///                5
///              4    9
///            3     8
///          2      7                   to store   2 3 4 5           than 7 8 9

[code]
(option 1)

 Stack<TreeNode> stk = new Stack<TreeNode>();
InsertAllLeft(root, stk);

int pre = Int32.MinValue;

// yic: to prevent first node is MinValue
bool isFirst = true;

while (stk.Count > 0)
{
    TreeNode curr = stk.Pop();
    if (!isFirst && pre >= curr.val)
    {
        return false;
    }
    isFirst = false;

    pre = curr.val;

    if (curr.right != null)
    {
        InsertAllLeft(curr.right, stk);
    }
}

return true;


(option 2) use inorder traversal

// to left 
if (node.left != null)
{
    InorderTraversal(node.left);
}
            
// compare & update
if (lastNode != null && lastNode.val >= node.val)
{
    isValid = false;
}

lastNode = node;

// to right
if (node.right!=null)
{
    InorderTraversal(node.right);
}


/// 270. Closest Binary Search Tree Value
/// https://leetcode.com/problems/closest-binary-search-tree-value/description/
/// Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.
/// Note:
/// 
/// Given target value is a floating point.
/// You are guaranteed to have only one unique value in the BST that is closest to the target.
/// Example:
/// 
/// Input: root = [4, 2, 5, 1, 3], target = 3.714286

[code]
TreeNode smaller = CloseLower(root, target);
TreeNode larger = CloseLarger(root, target);

(1)closer  Lower 
if (root == null)
{
    return null;
}
if (root.val == target)
{
    return root;
}

if (root.val < target)
{
    // to right
    TreeNode right = CloseLower(root.right, target);
    if (right == null)
    {                  // no find child, since target is bigger
        return root;   // so this is closest smaller than target
    }
    return right;
}
// else

// curr > target
// go to left ,  smaller is not yet find
return CloseLower(root.left, target);   // can be null becasue we cannot find any lower than target




/// lint 453
/// http://www.lintcode.com/en/problem/flatten-binary-tree-to-linked-list/
/// Flatten a binary tree to a fake "linked list" in pre-order traversal.
/// Here we use the right pointer in TreeNode as the next pointer in ListNode.
/// 
/// Example
///                  1
///                   \
///         1          2
///        / \          \
///       2   5    =>    3
///      / \   \          \
///     3   4   6          4
///                         \
///                          5
///                           \
///                            6
/// sol  find the last node in left branch of node(1) -> 4 .  connect 4 right = 1 riight,  root.right = root.left. and root.left = null (move to right)  
 return the last node in right branch if there is, otherwise, return left most ; otherwise return root.



/// 301. Remove Invalid Parentheses
/// https://leetcode.com/problems/remove-invalid-parentheses/description/
/// Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.
/// Example
/// "()())()" -> ["()()()", "(())()"]
/// "(a)())()" -> ["(a)()()", "(a())()"]
/// ")(" -> [""]
/// 
/// sol:
/// 
/// 1. get left and right extra parentheses count need to be removed. be aware of ")("  case
/// 2. use leftextra and rightextra  and open as stop condition.
/// 
/// foreach s
/// 
/// if '('    use  then open++
///          no use   then  leftExtra--.
///          
/// if ')'   use  then open--
///          no use  rightExtra--
///          
/// 
/// stop when   index >=len  , or leftExtra|rightExtra|oepn smaller than 0 (memans over substract)
[code]
 private void DFSHelper(string s, int idx, HashSet<string> ans, int leftCount, int rightCount, StringBuilder sb, int openCount)
{
    if (leftCount < 0 || rightCount < 0 || openCount < 0)   // yic use open to make sure curr loc is okay before move on
    {
        return;
    }
    if (idx >= s.Length)
    {
        if (leftCount == rightCount && rightCount ==0 && openCount==0)
        {
            ans.Add(sb.ToString());
        }
        return;
    }
            
    if (s[idx] == '(')
    {
        // use it
        sb.Append('(');            // left keep as is
        DFSHelper(s, idx + 1, ans, leftCount, rightCount, sb, openCount + 1);
        sb.Remove(sb.Length-1, 1);
                
        // don't use it
        DFSHelper(s, idx + 1, ans, leftCount-1, rightCount, sb, openCount);
    }
    else if (s[idx] == ')')
    {
        // use it
        sb.Append(')');
        DFSHelper(s, idx + 1, ans, leftCount, rightCount, sb, openCount - 1);
        sb.Remove(sb.Length-1, 1);

        // don't use it
        DFSHelper(s, idx + 1, ans, leftCount, rightCount-1, sb, openCount);
    }
    else
    {
        sb.Append(s[idx]);
        DFSHelper(s, idx + 1, ans, leftCount, rightCount, sb, openCount);
        sb.Remove(sb.Length - 1, 1);
    }
}


/// 31. Next Permutation
/// https://leetcode.com/problems/next-permutation/description/
/// Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
/// 
/// If such arrangement is not possible, it must rearrange it as the lowest possible order(ie, sorted in ascending order).
/// 
/// The replacement must be in-place and use only constant extra memory.
/// 
/// Here are some examples.Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
/// 
/// 1,2,3 → 1,3,2
/// 3,2,1 → 1,2,3
/// 1,1,5 → 1,5,1
/// 
/// sol
/// 
///  --> 1 3 2 3 1       search for ascending from righ to left, stop  (2),   and swap with value just greater (3)
///  --> 1 3 3 [2 1]     it will be ascending , but we want smaller so, revese the after swap
///  --> 1 3 3 [1 2]

///  (1)  find anchor index start to descend,  right part is ascending
///  (2)  swap achor index with the position value just greater than anchor V,  so that we can make min high bit change
///
///          1 [2] 8 7 6 0
///
///		  swap with 6
///	=>    1 [6] 8 7 2 0
///	            reverse right part so that this become the next 
///	==>   1 [6] 0 2 7 8
[code]
for (int j = len-1; j >anchor; j--)
{
    // find num that is just greater than nums[anchor] so that the high bit change is smallest
    if (nums[j] > nums[anchor])
    {
        swap(nums, j, anchor);
        break;
    }
}

// then reverse anchor+1 ~len-1

/// 425. Word Squares
/// https://leetcode.com/problems/word-squares/description/
/// Given a set of words (without duplicates), find all word squares you can build from them.
///
///A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k<max(numRows, numColumns).
///
//  For example, the word sequence["ball", "area", "lead", "lady"] forms a word square because each word reads the same both horizontally and vertically.
///
 b a  l  l
 a r  e  a
 l e  a  d  
 l a  d  y
 
 sol
(1) use trie to construct words so that we can lookup  prefix to get candidates

(2) DFS 
 /// step 1
///   b  [a]   l  l          -> currently  we have 1 word,  so Indx = 1
/// 
/// find next word with prefix of word   ball[1]   ie "a"    so choose  "a"rea
/// 
/// step 2  
///   
///   b  a     l   l
///   a  r     e   a              -> currently, we have 2 words   so index =2
///   
/// find next word with prefix  char    ball[2]  +  area[2]      ie  "le"    so choose  "le"ad 

private void WordSquaresHelper(int finalLen, WQTrie trie, List<string> oneAns, List<List<string>> allAns)
{
    if (oneAns.Count == finalLen)
    {
        CopyOneAns(oneAns, allAns);
        return;
    }

    int index = oneAns.Count;
    string prefix = "";
    foreach (string str in oneAns)
    {
        prefix += str[index];      // take a char from index of each ans word      b [a]  xxx
                                    //                                              a [r]  yyy
    }

    List<string> startWithPrefixStrs = trie.startWithPrefix(prefix);
    foreach(string str in startWithPrefixStrs)
    {
        oneAns.Add(str);
        WordSquaresHelper(finalLen, trie, oneAns, allAns);
        oneAns.RemoveAt(oneAns.Count - 1);   // remove str just added.  can be we have store in AllAns or not fix. Now, we try next word for OneAns
    }
}

public class WQTrie
{
    WQNode root;

    public WQTrie()
    {
        root = new WQNode();
    }

    public void AddWord(string str)
    {
        WQNode curr = root;

        foreach(char c in str)
        {
            if (curr.children[c] == null)
            {
                curr.children[c] = new WQNode();
            }

            curr = curr.children[c];
            curr.startWith.Add(str);   // yic  record   "ap"    contains apple
        }

        curr.hasWord = true;
    }
	...
}

class WQNode
{
    public bool hasWord;
    public WQNode[] children;

    public List<string> startWith;

    public WQNode()
    {
        hasWord = false;
        children = new WQNode[256];
        startWith = new List<string>();
    }
}


/// lint 575
/// 575. Decode String
/// http://www.lintcode.com/en/problem/expression-expand/
/// Given an expression s includes numbers, letters and brackets. Number represents the number of repetitions inside the brackets(can be a string or another expression)．Please expand expression to be a string.
/// 
/// s = abc3[a] return abcaaa
/// s = 3[abc] return abcabcabc
/// s = 4[ac]dy, return acacacacdy
/// s = 3[2[ad]3[pf]]xyz, return adadpfpfpfadadpfpfpfadadpfpfpfxyz
/// 
/// sol:
/// 把所有字符一个个放到 stack 里， 如果碰到了 ]，就从 stack 找到对应的字符串和重复次数，decode 之后再放回 stack 里
Stack<char> stk = new Stack<char>();
int len = s.Length;
for (int i = 0; i < len; i++)
{
    char c = s[i];
    if (c == ']')
    {                  
        //(1) get pattern
        string pattern = string.Empty;
        while(stk.Peek() != '[')
        {
            pattern = stk.Pop() + pattern;
        }

        //(2) pop [
        stk.Pop();  // pop '['

        //(3) get repeat num, be careful  3[ab] case, need to check if stk empty; otherwise peek will fail
        int repeat = 0;
        int factor = 1;
        while (stk.Count > 0 && char.IsDigit(stk.Peek()))
        {
            repeat = repeat + (stk.Pop() - '0') *factor;
            factor *= 10;
        }

        // (4) put back to stk for outerloop repeat
        while(repeat > 0)
        {
            for (int j = 0; j < pattern.Length; j++)
            {
                stk.Push(pattern[j]);
            }
            repeat--;
        }
    }
    else
    {
        // push everything besides ]
        stk.Push(c);
    }
}

string ans = "";

while(stk.Count >0)
{
    ans = stk.Pop() + ans;
}

return ans;


/// 42. Trapping Rain Water
/// https://leetcode.com/problems/trapping-rain-water/description/
/// Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water 
/// it is able to trap after raining.
/// 
/// Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.
/// 
/// sol:
/// 
/// use left and right,
/// 
// pick smaller height and got one direction to get area (since the otherside is higher, won't go over)  (stop when leftH <= arr[i])
// then reconsider choose left or right
int left = 0;
int right = N - 1;

int area = 0;

while (left < right)
{
    int leftH = height[left];
    int rightH = height[right];

    if (leftH <= rightH)
    {  
        int i = left + 1;
        while (leftH > height[i])
        {
            area += (leftH - height[i]);
            i++;
        }
        left = i;
    }
    else
    {
        int i = right - 1;
        while (height[i] < rightH)
        {
            area += (rightH - height[i]);
            i--;
        }
        right = i;
    }
}

return area;


/// 84
/// https://leetcode.com/problems/largest-rectangle-in-histogram/solution/
/// Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
/// 
/// For example,
/// Given heights = [2, 1, 5, 6, 2, 3],
/// return 10.
/// 
/// sol:
/// 
///  H  2  1  5  6  2  3
/// idx 0  1  2  3  4  5 
    /// 
/// only put increase height into stack
/// 
/// case1
/// Incoming height is higher means currH can apply to future, (unknown for now), so don't compute and insert the incoming height.
/// 
/// case2 
/// Incoming height is smaller means currH (nextH:2 vs currH:6)cannot be used for future, can compute height now, do the "pop" stk until currH is smaller than incoming H. (keep stk increase in height)
/// When compute, use (nextLoc - (preLoc+1)) as width.  Note:  preLoc+1  because preLoc is smaller and cannot use
[code]
private int EvauluateAreaAndInsert(Stack<Item> stk, Item nextItem)
{
    int curMaxArea = 0;
    // 4 6, <-3      6 cannot use for future, so compute are now
    // 4 5, <-5'      5 can be use for future, just insert
    while(stk.Count > 0 && stk.Peek().height > nextItem.height)
    {
        var currItem = stk.Pop();

        if (stk.Count == 0)
        {
            // global width case 0~nextLoc                                              4  2
            curMaxArea = Math.Max(curMaxArea, currItem.height * nextItem.loc);    //idx 3  7      // nextItemLoc-1 height is guarantee greater or equal to currH
        }

        else
        {                                                                          // preH is small, +1 for next loc,  (+1 loc, guarantee to be ge to currH)  <- monotomic incr height
            curMaxArea = Math.Max(curMaxArea, currItem.height * (nextItem.loc - (stk.Peek().loc + 1)));
        }
    }

    // now put nextItem to monotomic (increase height) stack
    stk.Push(nextItem);
    return curMaxArea;
}


private int EvaluteFinalAreaFromMonStack(Stack<Item> stk, int lastIdx)
{
    int maxArea = 0;

    while(stk.Count > 0)
    {
        var curr = stk.Pop();

        if (stk.Count == 0)
        {                                                                
            maxArea = Math.Max(maxArea, curr.height * (lastIdx+1));     // +1 to include last one
        }
        else
        {
            maxArea = Math.Max(maxArea, curr.height * ((lastIdx+1) - (stk.Peek().loc + 1)));   // inlcude +1 itself   -  (preLoc+1)
        }
    }

    return maxArea;
}
