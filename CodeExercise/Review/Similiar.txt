/// 443. Two Sum - Greater than target
/// https://www.lintcode.com/problem/two-sum-greater-than-target/description
/// Given an array of integers, find how many pairs in the array such that their sum is bigger than a specific target number. 
/// Please return the number of pairs.
///Example
///Given numbers = [2, 7, 11, 15], target = 24. Return 1. (11 + 15 is the only pair)
 [code]
 Array.Sort(nums);
int right = nums.Length-1;
int left = 0;

while(left < right)
{
    if (nums[left] + nums[right] > target)
    {
        ans += (right - left);    // yic means [left  .... + (right will be also greater   ex.  3  4 5  6 [7]   target  3+[7] =10  
                                    //means 4+[7]  5+[7] will be greater as well,  next step we move left [7], so won't have duplicate  
        right--;
    }
    else
    {
        left++;
    }              
}

/// <summary>
/// Lint 382. Triangle Count 
/// https://www.lintcode.com/en/old/problem/triangle-count/
/// Given an array of integers, how many three numbers can be found in the array, 
/// so that we can build an triangle whose three edges length is the three numbers that we find?

/// Given array S = [3,4,6,7], return 3. They are:
///
///[3,4,6]
///[3,6,7]
///[4,6,7]
///Given array S = [4,4,4,4], return 4. They are:



// 230. Kth Smallest Element in a BST
/// https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/
/// Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
/// Note: 
/// You may assume k is always valid, 1 ≤ k ≤ BST's total elements.
/// sol
/// 使用 Binary Search Tree Iterator 的方式（可以参考 binary search tree iterator 那个题）
///用 stack，从第一个点开始，走 k-1 步，就是第 k 个点了。
/// 时间复杂度是 O(h + k)O(h+k) h 是树的高度。
[code]
Stack<TreeNode> stk = new Stack<TreeNode>();

InsertAllLeft(root, stk);

int count = 0;
int ans = -1;
while (stk.Count > 0)
{
    TreeNode node = stk.Pop();
    count++;
    Console.WriteLine(node.val);

    if (count ==k)
    {
        ans = node.val;
        break;
    }

    if (node.right !=null)
    {
        InsertAllLeft(node.right, stk);
    }
}


/// 98. Validate Binary Search Tree
/// https://leetcode.com/problems/validate-binary-search-tree/description/
/// Given a binary tree, determine if it is a valid binary search tree (BST).
/// Assume a BST is defined as follows:
/// 
/// The left subtree of a node contains only nodes with keys less than the node's key.
/// The right subtree of a node contains only nodes with keys greater than the node's key.
/// Both the left and right subtrees must also be binary search trees.
/// sol:
/// 
/// think use stack
 Stack<TreeNode> stk = new Stack<TreeNode>();
InsertAllLeft(root, stk);

int pre = Int32.MinValue;

// yic: to prevent first node is MinValue
bool isFirst = true;

while (stk.Count > 0)
{
    TreeNode curr = stk.Pop();
    if (!isFirst && pre >= curr.val)
    {
        return false;
    }
    isFirst = false;

    pre = curr.val;

    if (curr.right != null)
    {
        InsertAllLeft(curr.right, stk);
    }
}

return true;



//
先序遍历 iteration
思路
遍历顺序为根、左、右

如果根节点非空，将根节点加入到栈中。
如果栈不空，弹出出栈顶节点，将其值加加入到数组中。
如果该节点的右子树不为空，将右子节点加入栈中。
如果左子节点不为空，将左子节点加入栈中。
重复第二步，直到栈空。
代码实现
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<TreeNode>();
        List<Integer> preorder = new ArrayList<Integer>();
        
        if (root == null) {
            return preorder;
        }
        
        stack.push(root);
        while (!stack.empty()) {
            TreeNode node = stack.pop();
            preorder.add(node.val);      // record on pop
            if (node.right != null) {   // push right first.
                stack.push(node.right);
            }
            if (node.left != null) {    
                stack.push(node.left);   // then push left 
            }
        }
        
        return preorder;
    }
}


// http://blog.sina.com.cn/s/blog_eb52001d0102v1si.html
http://blog.csdn.net/fightforyourdream/article/details/16843303         面试大总结之二：Java搞定面试中的二叉树题目
以及：
http://blog.csdn.net/luckyxiaoqiang/article/details/7518888                 轻松搞定面试中的二叉树题目
http://www.cnblogs.com/Jax/archive/2009/12/28/1633691.html           算法大全（3） 二叉树

二叉树是面试中的常考题目。而且许多别的题是基于二叉树的，所以我们必须对二叉树无比熟悉。
经过多日的努力，以下所有的题目主页君全部实现了一次，并且加上自己的理解，所有的算法都基本最优化过。敬请大家指正：

以下是目录，以及主页君的代码

GitHub代码链接-Tree大总结
https://github.com/yuzhangcmu/LeetCode_algorithm/blob/master/tree/TreeDemo.java
 
1. 求二叉树中的节点个数:
        getNodeNumRec（递归），getNodeNum（迭代）
2. 求二叉树的深度:
        getDepthRec（递归），getDepth 
3. 前序遍历，中序遍历，后序遍历:
        preorderTraversalRec, preorderTraversal, inorderTraversalRec, postorderTraversalRec
4. 分层遍历二叉树（按层次从上往下，从左往右）:
        levelTraversal, levelTraversalRec（递归解法）
5. 将二叉查找树变为有序的双向链表:
        convertBST2DLLRec, convertBST2DLL
6. 求二叉树第K层的节点个数：
        getNodeNumKthLevelRec, getNodeNumKthLevel
7. 求二叉树中叶子节点的个数：
        getNodeNumLeafRec, getNodeNumLeaf
8. 判断两棵二叉树是否相同的树：
        isSameRec, isSame
9. 判断二叉树是不是平衡二叉树：isAVLRec
10. 求二叉树的镜像（破坏和不破坏原来的树两种情况）：
     mirrorRec, mirrorCopyRec
     mirror, mirrorCopy
10.1 判断两个树是否互相镜像：isMirrorRec isMirror
11. 求二叉树中两个节点的最低公共祖先节点：
         LAC        求解最小公共祖先, 使用list来存储path.
         LCABstRec  递归求解BST树.
         LCARec     递归算法 .
12. 求二叉树中节点的最大距离：
         getMaxDistanceRec
13. 由前序遍历序列和中序遍历序列重建二叉树：
         rebuildBinaryTreeRec
14. 判断二叉树是不是完全二叉树：
         isCompleteBinaryTree, isCompleteBinaryTreeRec
15. 找出二叉树中最长连续子串(即全部往左的连续节点，或是全部往右的连续节点）
         findLongest


/// 131
/// Given a string s, partition s such that every substring of the partition is a palindrome. 
///        Return all possible palindrome partitioning of s.
///        For example, given s = "aab",
/// Return
/// [
///  ["aa","b"],
///  ["a","a","b"]
/// sol   need to visit all, so need to check each position
[code]
List<List<string>> results = new List<List<string>>();
List<string> path = new List<string>();
PalindromePartitionHelper(s, 0, results, path);

...
if (index == s.Length)
{
    List<string> clone = new List<string>(path);
    results.Add(clone);
    return;
}

for(int i = index; i < s.Length; i++)
{
    int subLen = (i - index) + 1;
    string sub = s.Substring(index, subLen);
                
    if (isPalindrome(sub))
    {
        path.Add(sub);
        PalindromePartitionHelper(s, i + 1, results, path);
        path.RemoveAt(path.Count - 1);         //* YIC remove the last one from List<string>  can't path.Remove(sub) it will remove the first match from front.
    }
}


/// 132
/// Given a string s, partition s such that every substring of the partition is a palindrome. 
///        Return the minimum cuts needed for a palindrome partitioning of s.
///        For example, given s = "aab",
///Return 1 since the palindrome partitioning["aa", "b"] could be produced using 1 cut.
///
/// Sol  F[j] = min (F[i] where i: 0~j-1 and i to j is palindrome ) +1
/// 
/// O(n^2)
(1)precompute
private static bool[,] computePalindrome(string s)
{
    int len = s.Length;
    bool[,] memo = new bool[len, len];   // init to all false
    for (int i = 0; i <len; i++)
    {
        // odd
        int mid = i;
        int left = mid;
        int right = mid;
        while(left >= 0 && right <len && s[left] == s[right])
        {
            memo[left, right] |= true;
            left--;
            right++;
        }

        // even
        left = mid;
        right = mid+1;
        while (left >= 0 && right < len && s[left] == s[right])
        {
            memo[left, right] |= true;
            left--;
            right++;
        }
    }

    return memo;   
}

(core)
public static int MinCut(string s)
{
	int len = s.Length;
	int[] F = new int[len+1];
	bool[,] calPalindrome = computePalindromeOutward(s);

	for (int i = 0; i <= len; i++)
	{
		F[i] = i;   // pre cut for all places
	}

	for(int i = 1; i <= s.Length; i++)
	{
		for(int j = i; j <=s.Length; j++)
		{
			if (calPalindrome[i-1,j-1])
			{
				F[j] = Math.Min(F[j], F[i-1] + 1);
			}
		}
	}

	return F[len]-1;
}




/// <summary>
/// https://www.youtube.com/watch?v=jaNZ83Q3QGc
/// </summary>
/// You are given coins of different denominations and a total amount of money.
/// Write a function to compute the number of combinations that make up that amount. 
/// 
/// (1,2,3)  target 4
/// 
/// ans = 4
/// ->
/// [1 1 1 1]
/// [1 1 2]
/// [1 3]
/// [2 2]
/// 
/// 
/// sol:                                                                       amount
/// 
///       0 1 2 3 4             for each new coin seleciton     orig + (how many combine before current coin)
///init   1 0 0 0 0
///give 1   1 a b 1              a = arr[2]_orig_b4_coin1 + arr[2-1] = 1    b =arr[3]+arr[3-1]= 1    
///give 2     c d e              c=  arr[2] + arr[2-1] = 1+1  d =arr[3]+arr[3-2]=1+1=2   e= arr[4]+arr[4-2]=1+2=3

[code]

int[] ansArr = new int[target + 1];   // put 0 as 1 for padding purpose and a[0] = 1 
ansArr[0] = 1;

foreach(int coin in coins)
{
    for(int currentTarget = 0; currentTarget <= target; currentTarget++)
    {
        if (currentTarget >= coin)
        {
            ansArr[currentTarget] += ansArr[currentTarget - coin];    //inital currAns before having the coin + ways if having the current coin
        }
    }
}



/// 127 Word Ladder
/// https://leetcode.com/problems/word-ladder/description/
/// Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:
/// Only one letter can be changed at a time.
/// Each transformed word must exist in the word list.Note that beginWord is not a transformed word.
/// Note:
/// 
/// Return 0 if there is no such transformation sequence.
/// All words have the same length.
/// All words contain only lowercase alphabetic characters.
///        You may assume no duplicates in the word list.
///        You may assume beginWord and endWord are non-empty and are not the same.
/// Example 1:
/// 
/// 
///        Input:
///        beginWord = "hit",
///        endWord = "cog",
///        wordList = ["hot", "dot", "dog", "lot", "log", "cog"]
/// 
/// 
///        Output: 5
/// 
/// 
///        Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
///        return its length 5.

[code] 
HashSet<string> visited = new HashSet<string>();
Queue<string> queue = new Queue<string>();
queue.Enqueue(beginWord);
visited.Add(beginWord);

int len = 0;

// bfs level
while (queue.Count > 0)
{
    int levelSize = queue.Count;

    for (int i = 0; i < levelSize; i++)
    {
        string curr = queue.Dequeue();

        if (string.Compare(curr, endWord) == 0)
        {
            return len + 1;  // base 1
        }

        // get all possitble combinations
        // if already exists in pre level, don't count, since we care about the shortest path
        HashSet<string> candidates = getNextWords(curr, visited, dictionary);

        foreach (string candidate in candidates)
        {
            queue.Enqueue(candidate);
            visited.Add(candidate);
        }
    }
    len++;

}


/// 126. Word Ladder I II
/// https://leetcode.com/problems/word-ladder-ii/description/
/// Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:
///Only one letter can be changed at a time
///Each intermediate word must exist in the dictionary
///Example
///Given:
///start = "hit"
///end = "cog"
///dict = ["hot","dot","dog","lot","log"]
///        Return
///  [
///    ["hit", "hot", "dot", "dog", "cog"],
///    ["hit","hot","lot","log","cog"]
///  ]
sol  :  same as ladder I using bfs, but use Dicitonary<stirng, List<string>> parentlookup and a visited[string, depth], parentlookup will be use it for later dfs backtrack.
visited will be used in dfs for determine if we need to go down with min length

[parentLookup]
{log,dog} <- cog
{lot} <- log

---BFS----
parentsLookup[nxt].Add(curr); // set parent

if (!visited.ContainsKey(nxt))
{
    if (string.Compare(nxt, endWord) == 0)
    {
        found = true;
    }

    visited.Add(nxt, distance);  // update distance
    queue.Enqueue(nxt);
}

---DFS---
if (string.Compare(beginWord, endWord) == 0)
{
    List<string> copy = new List<string>(currPath);
    copy.Reverse();
    ans.Add(copy);
    return;
}

if (!parentsLookup.ContainsKey(beginWord))
{
    return;
}
List<string> parents = parentsLookup[beginWord];

foreach(string parent in parents)
{
    if (visited[beginWord] == (visited[parent] +1))  // yic must have to make sure alsways go down rather tahn go up to diff level. cannot use visited[parent] because it may select detour string
    {
        currPath.Add(parent);
        DFSHelper(parent, endWord, visited, parentsLookup, currPath, ans);
        currPath.RemoveAt(currPath.Count - 1);
    }
                
}



/// 239
/// Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.
/// For example,
/// Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
/// 
/// Window position Max
/// ---------------               -----
/// [1  3  -1] -3  5  3  6  7       3
///  1 [3  -1  -3] 5  3  6  7       3
///  1  3 [-1  -3  5] 3  6  7       5
///  1  3  -1 [-3  5  3] 6  7       5
///  1  3  -1  -3 [5  3  6] 7       6
///  1  3  -1  -3  5 [3  6  7]      7
/// Therefore, return the max sliding window as [3,3,5,5,6,7].
[sol] use Dequeue
//[1,3,-1,-3,5,3,6,7]
for (int i = 0; i < k; i++)
{
    insertToDequeue(dequeue, nums[i]);
}
ans.Add(dequeue.Last());

for (int i = k; i < N; i++)
{
    removeFromDequeue(dequeue);
    insertToDequeue(dequeue, nums[i]);
    ans.Add(dequeue.Last());
}

return ans.ToArray();


private void insertToDequeue(LinkedList<int> dequeue, int num)
{
    int replaceCount = 0;
    while(dequeue.Count > 0 && dequeue.First() < num)   // keep the same number in the list, only discard smaller
    {
        dequeue.RemoveFirst();
        replaceCount++;
    }

    // replace bigger from old
    while(replaceCount > 0)
    {
        dequeue.AddFirst(num);
        replaceCount--;
    }

    // add
    dequeue.AddFirst(num);
}

private void removeFromDequeue(LinkedList<int> dequeue)
{
    dequeue.RemoveLast();
}



// Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.
/// 
/// For example,
/// Given nums = [1, 3, -1, -3, 5, 3, 6, 7], and k = 3.
/// 
/// Window position                Median
/// ---------------               -----
/// [1  3  -1] -3  5  3  6  7       1
///  1 [3  -1  -3] 5  3  6  7       -1
///  1  3 [-1  -3  5] 3  6  7       -1
///  1  3  -1 [-3  5  3] 6  7       3
///  1  3  -1  -3 [5  3  6] 7       5
///  1  3  -1  -3  5 [3  6  7]      6
/// Therefore, return the median sliding window as [1,-1,-1,3,5,6].

[sol]  use MaxHeap + MinHeap



/// 673
/// https://leetcode.com/problems/number-of-longest-increasing-subsequence/solution/
/// https://www.youtube.com/watch?v=CE2b_-XfVDk
/// 
/// Given an unsorted array of integers, find the number of longest increasing subsequence. 
///         Example 1:
/// Input: [1,3,5,4,7]
///         Output: 2
/// Explanation: The two longest increasing subsequence are[1, 3, 4, 7] and[1, 3, 5, 7].
/// 
///         Example 2:
/// Input: [2,2,2,2,2]
///         Output: 5
/// Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
/// </summary>
/// 
/// Note: LIS [ 1 2 4 3 5 4 7 2]
/// 
///     len   [ 1 2 3 3 4 4 5 2]
///     count [ 1 1 1 1 2 1 3 1]   //  note  max len = 5, count = 2+1 =3
/// 
/// 
/// time O(n^2)
/// space O(n)
/// <param name="nums"></param>
/// <returns></returns>
public int FindNumberOfLIS(int[] nums)
{
    int len = nums.Length;
    int[] lenghts = new int[len];
    int[] numMaxCount = new int[len];

    // set default ans to 1 for each position
    for(int i = 0; i < len; i++)
    {
        lenghts[i] = 1;
        numMaxCount[i] = 1;
    }

    // cache the longest to find the number of longest
    int longest = 1;

    for (int j = 0; j < len; j++)
    {
        for (int i = 0; i<j; i++)
        {
            if (nums[i] < nums[j])
            {
                //goal : lenghts[j] = Math.Max(lenghts[j], lenghts[i] + 1);

                if (lenghts[j] < (lenghts[i] + 1))
                {
                    // lenghtset max for the position j
                    lenghts[j] = lenghts[i] + 1;
                    numMaxCount[j] = numMaxCount[i];
                }
                else if (lenghts[j] == (lenghts[i] + 1))
                {   // 1 2 5     [6]
                    // 1 2 4     [6]   both 4 and 5 contrubute to maxLen for 6. need to combine
                    // some other pre position can also add up to the same count
                    numMaxCount[j] += numMaxCount[i];   // yic  check  [1 2 3 4 5 4 7] case  the max count = 3
                }

                longest = Math.Max(longest, lenghts[j]);
            }
        }
    }

    int ans = 0;
    // compute the final maxlen combine  6 5 3    => 1+1+1
    for (int k = 0; k < len; k++)
    {
        if (lenghts[k] == longest)
        {
            ans += numMaxCount[k];
        }
    }

    return ans;
}

/// 63
/// Follow up for "Unique Paths":
///         Now consider if some obstacles are added to the grids.How many unique paths would there be?
///        An obstacle and empty space is marked as 1 and 0 respectively in the grid.
///        For example,
///        There is one obstacle in the middle of a 3x3 grid as illustrated below.
/// [
///          [0,0,0],
///          [0,1,0],
///          [0,0,0]
/// ]
[Forward]
int[,] memo = new int[M, N];
memo[0, 0] = 1;

for (int j = 0; j < M; j++)
{
    for (int i = 0; i < N; i++)
    {
        if (obstacleGrid[j, i] == 1)
        {
            memo[j, i] = 0;
        }
        else
        {
            // check left
            if ((i - 1) >= 0 && (j - 1) >= 0)
            {
                memo[j, i] = memo[j, i - 1] + memo[j - 1, i];
            }
            else if ((i - 1) >= 0)
            {
                memo[j, i] = memo[j, i - 1];
            }
            else if ((j - 1) >= 0)
            {
                memo[j, i] += memo[j - 1, i];
            }
        }
    }
}

return memo[M - 1, N - 1];



/// 563 Backpack V
/// http://www.lintcode.com/en/problem/backpack-v/
/// Given n items with size nums[i] which an integer array and all positive numbers. 
/// An integer target denotes the size of a backpack. Find the number of possible fill the backpack.
/// 
/// sol
/// Given candidate items [1,2,3,3,7] and target 7,
///        A solution set is: 
///        [7]
///        [1, 3, 3]
///        return 2
/// </summary>
/// <param name="nums"></param>
/// <param name="target"></param>
/// <returns></returns>
public int BackPackV(int[] nums, int target)
{
    int N = nums.GetLength(0);
    int[,] F = new int[N + 1, target + 1];

    // init all 0 and F[0,0] = 1;      note F[i, 0]  = 1 can be set in later for loop
    F[0, 0] = 1;

    for (int i = 1; i <= N; i++)
    {
        for (int v = 0; v <= target; v++)  // YIC start from 0, don't rush to get target, compute on the fly to get final target
        {
            F[i, v] = F[i - 1, v];     // a day before has reached v

            if (v - nums[i - 1] >=0)
            {
                F[i, v] += F[i - 1, v - nums[i - 1]];   // today after add nums[i-1] reach v
            }      
        }
    }

    return F[N, target];
}

/// http://www.lintcode.com/en/problem/backpack-ii/
/// Given n items with size Ai and value Vi, and a backpack with size m. What's the maximum value can you put into the backpack?
/// 
/// ex
/// Given 4 items with size [2, 3, 5, 7] and value [1, 5, 2, 4], and a backpack with size 10. The maximum value is 9.
/// 
/// F[i,W] = Max( F[i-1,w] , F[i,W-wi] + vi )
/// </summary>
/// <param name="s"> backpack size</param>
/// <param name="A"></param>
/// <param name="V"></param>
/// <returns></returns>

int[,] F = new int[N + 1, s + 1];   // numItems, size
F[0, 0] = 0;     // no size quota
for(int w = 1; w <= s; w++)
{
    for (int i = 1; i <= N; i++)
    {
        F[i, w] = F[i - 1, w];

        if ((w - A[i-1]) >= 0)
        {
            F[i, w] = Math.Max(F[i-1, w], 
			                   F[i-1, w - A[i - 1]] + V[i - 1]);
        }
    }
}

/// http://www.lintcode.com/en/problem/backpack-iii/
/// 
/// Given n kind of items with size Ai and value Vi( each item has an infinite number available) and a backpack with size m. 
/// What's the maximum value can you put into the backpack?
int[,] F = new int[N + 1, m + 1];
for(int i = 1; i <= N; i++)
{
    for (int w= 1; w<=m; w++)
    {
        F[i, w] = F[i-1, w];

        if (w-A[i-1] >=0)
        {
            F[i, w] = Math.Max(F[i-1, w],
                                F[i, w - A[i - 1]] + V[i - 1]);
        }
    }
}

return F[N, m];

/// 394 Coins in a line
/// http://www.lintcode.com/en/problem/coins-in-a-line/
/// There are n coins in a line. Two players take turns to take one or two coins from right side until there are no more coins left. The player who take the last coin wins.
///Could you please decide the first play will win or lose?
/// </summary>
/// <param name="n"></param>
/// <returns></returns>
public bool firstWillWin(int n)
{
            
    if (n == 0 || n ==3)
    {
        return false;
    }
    if (n== 1 || n == 2 || n==4)
    {
        return true;
    }

    bool[] F = new bool[n + 1];
    F[0] = false;   // no coin to choose, loose
    F[1] = true;
    F[2] = true;
    F[3] = false;
    F[4] = true;   // choose 1   and let opponent F[3] state

    for (int i = 4; i <=n; i++)
    {
        // take 1|2,   and refer to F state after the opponent finish his term. Opponent will choose the winner side, so use &
        // (1) take one, opponent take 1 or 2, so check F[i-1-1] & F[i-1-2]
        // (2) take two, opponent take 1 or 2, so check F[i-2-1] & F[i-2-2]
        F[i] = (F[i - 2] && F[i - 3]) || (F[i - 3] && F[i - 4]);
    }

    return F[n];
}

/// 396 coins in a line 3
/// http://www.lintcode.com/en/problem/coins-in-a-line-iii/
/// here are n coins in a line. Two players take turns to take a coin from one of the ends of the line until there are no more coins left. 
/// The player with the larger amount of money wins.
/// Could you please decide the first player will win or lose?
/// 
/// F[i,j] = Max    
///                 take left coin[i]  + Math.min(         // opponet will try make us smaller
///                                               F[i+2,j]  , F[i+1,j-1])
///                                               
///                 take right coint[j] + Math.min(
///                                                F[i,j-2] , F[i+1,j-1])
/// 
/// </summary>
/// <param name="values"></param>
/// <returns></returns>

int firstSum = firstWillWin3Helper(values, F, 0, N - 1, memo);
return (firstSum*2) >= sum;

----
private int firstWillWin3Helper(int[] values, int[,] F, int i, int j, bool[,] memo)
{
    if (i > j)
    {
        return 0;
    }
    if (memo[i,j])
    {
        return F[i, j];
    }
    memo[i, j] = true;
    if (i == j)
    {
        F[i, j] = values[i];
        return F[i, j];
    }
    int takeLeft = values[i] + Math.Min(firstWillWin3Helper(values, F, i+2, j, memo),
                                        firstWillWin3Helper(values, F, i+1, j-1, memo));

    int takeRight = values[j] + Math.Min(firstWillWin3Helper(values, F, i+1, j-1, memo),
                                        firstWillWin3Helper(values, F, i, j - 2, memo));

    F[i, j] = Math.Max(takeLeft, takeRight);

    return F[i, j]; 
}



---------------Palindrom
/// https://leetcode.com/problems/longest-palindromic-substring/description/
/// Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
/// 
/// Input: "babad"
/// Output: "bab"
for (int i = 0; i<N; i++)
{
    // odd
    int oddLen = longestPalindromeInSubString(s, i, i);
                
    if (maxLen <= oddLen)
    {
        maxLen = oddLen;
        ans = s.Substring(i-maxLen/2, maxLen);   
    }
    // even
    int evenLen = longestPalindromeInSubString(s, i, i+1);
    if (maxLen <= evenLen)
    {
        maxLen = evenLen;
        ans = s.Substring(i - evenLen / 2 + 1, evenLen);
                    
    }
}
/// 409. Longest Palindrome 
/// Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.
/// This is case sensitive, for example "Aa" is not considered a palindrome here.
/// Note:
/// Assume the length of given string will not exceed 1,010. 
/// Example: 
/// Input:
/// "abccccdd"
/// 
/// Output:
/// 7
/// 
/// Note: order not matter~ can rearrange order.
[sol]  ans+= even_num    + odd_num-1  (get even part)      + extra odd


/// 516
/// https://leetcode.com/problems/longest-palindromic-subsequence/description/
/// Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.
///Example 1:
///Input:
///
///"bbbab"
///Output:
///4
/// for len = 3 ~ len
///    for i = 0~ N-len
///       f[i,i+len-1] = max (f[i, i+len-2], f[i+1, i+len-1])   and max with (f[i+1, i+len-2] + 2)

// 125
/// https://leetcode.com/problems/valid-palindrome/description/
/// Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
/// Note: For the purpose of this problem, we define empty string as valid palindrome.
/// 
/// Example 1:
/// 
/// Input: "A man, a plan, a canal: Panama"
/// Output: true
while (left <= right)
{
    while (left <= right && !isAlphaNumeric(lower[left]))
    {
        left++;
    }
    while (left <= right && !isAlphaNumeric(lower[right]))
    {
        right--;
    }

    // yic  the trick
    if (left <= right)
    {
        if (lower[left] == lower[right])
        {
            left++;
            right--;
        }
        else
        {
            return false;
        }
    }
}

//PalindromePartition
for (int i = 0; i <= len; i++)
{
    F[i] = i;   // pre cut for all places
}

for(int i = 1; i <= s.Length; i++)
{
    for(int j = i; j <=s.Length; j++)
    {
        if (calPalindrome[i-1,j-1])
        {
            F[j] = Math.Min(F[j], F[i-1] + 1);
        }
    }
}

return F[len]-1;

/// 131
/// Given a string s, partition s such that every substring of the partition is a palindrome. 
///        Return all possible palindrome partitioning of s.
///        For example, given s = "aab",
/// Return
/// [
///  ["aa","b"],
///  ["a","a","b"]
///]
/// DFS
private static void DFSHelper1(string s, List<List<string>> ans, List<string> currPath, int index)
{
    if (index >= s.Length)
    {
        List<string> copy = new List<string>(currPath);
        ans.Add(copy);
        return;
    }

    for (int i = index; i < s.Length; i++)
    {
        if (IsPalindrome1(s, index, i))
        {
            currPath.Add(s.Substring(index, (i - index + 1)));
            DFSHelper1(s, ans, currPath, i + 1);
            currPath.RemoveAt(currPath.Count - 1);    // remove
        }
    }
}

/// 77. Longest Common Subsequence 
/// http://www.lintcode.com/en/problem/longest-common-subsequence/
/// 
/// Given two strings, find the longest common subsequence (LCS).
/// Your code should return the length of LCS.
/// 
///  
///     nu A B C D
///  nu 0  0 0 0 0
///   E 0  0 0 0 0 
///   A 0  1 1 1 1
///   C 0  1 1 2 2
///   B 0  1 2 2 2
///    
/// sol: eql, take diagnal +1
///     Not eql, take left or top



/// Edit distance
for (int i = 1; i <= len1; i++)
{
    for (int j = 1; j <= len2; j++)
    {
                    
        if (s1[i-1] == s2[j-1])
        {
            res[i, j] = res[i - 1, j - 1];  //* must use diag to take previous [i-1,j-1] best conclude steps
        }
        else
        {
            int minOfTopToLeftCorner = Math.Min(res[i - 1, j - 1], Math.Min(res[i - 1, j], res[i, j - 1]));
            res[i, j] = minOfTopToLeftCorner + 1;
        }
    }
}



 /// 79 
/// Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set). 
/// If nums = [1,2,2], a solution is: 
///           [
///             [2],
///             [1],
///             [1,2,2],
///             [2,2],
///             [1,2],
///             []
///           ]
 Array.Sort(nums);


public static void dfsHelper2(int[] nums, int index, List<int> currPath, List<List<int>> ans)
{
    if (index >= nums.Length)
    {
        List<int> copy = new List<int>(currPath);
        ans.Add(copy);
        return;
    }

    // add 
    currPath.Add(nums[index]);
    dfsHelper2(nums, index + 1, currPath, ans);
    currPath.RemoveAt(currPath.Count -1);

    // no add
    int i = index + 1;
    while (i < nums.Length && nums[i] == nums[i-1])
    {
        i++;
    }

    dfsHelper2(nums, i, currPath, ans);
}


/// <summary>
/// Given a collection of numbers that might contain duplicates, return all possible unique permutations. 
///        For example,
///        [1, 1, 2] have the following unique permutations:
///        [
///          [1,1,2],
///          [1,2,1],
///          [2,1,1]
///        ]

private static void PermuteUniqueHelper(int[] nums, int index, List<List<int>> results)
{
    if (index == nums.Length)
    {
        List<int> result = new List<int>(nums);
        results.Add(result);
        return;
    }

    // * important  yic  cannot use i != index && num[i] == num[i-1]
    // because after top level has been swapped and num[i] == num[i-1] cannot hold
    //  0 9 0 1 0   < start level
    //  0 9 0 0 1

    //  0 9 1 0 0   < swap idx 2 and 3

    //  0 9 0 1 0   < swap idx 2 and 4  (no repeated)

    HashSet<int> appeared = new HashSet<int>();

    for (int i = index; i<nums.Length; i++)
    {

        //* YIC skip the same 
        if (appeared.Contains(nums[i]))
        {
            continue;
        }

        appeared.Add(nums[i]);

        swapArray(nums, index, i);
        PermuteUniqueHelper(nums, index + 1, results);
        swapArray(nums, i, index);
    }
}


/// 76
/// Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n). 
/// For example,
/// S = "ADOBECODEBANC"
/// T = "ABC"
/// Minimum window is "BANC". 
sol:

   lookup dictionary for T, because T can be "BBB"\
   use score (ie tLen) to control innder while loop out condition
   for (i:0~len)
      while(j ~ len  && score > 0)

/// leetcode 340
/// https://www.lintcode.com/problem/longest-substring-with-at-most-k-distinct-characters/description
/// Given a string s, find the length of the longest substring T that contains at most k distinct characters.
/// 
/// Example
///        For example, Given s = "eceba", k = 3,
/// 
///        T is "eceb" which its length is 4. 
Note:
 while (j < s.Length && (memo.Keys.Count < k || (memo.Keys.Count==k && memo.ContainsKey(s[j]))))    // < count < k or count ==k  but old key

 
/// Given a string S and a string T, count the number of distinct subsequences of S which equals T.
        /// A subsequence of a string is a new string which is formed from the original string by deleting some(can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).
        /// 
        /// Here is an example:
        /// S = "rabbbit", T = "rabbit"
        /// 
        /// Return 3.
        /// 
        /// Sol:
        /// DFS + memo  visit[i,j]   when if S[i] = T[j] move i, j, otherwise move i at curr level
        /// F[i,j]   start from A[i] and B[j] number of choices